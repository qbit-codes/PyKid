// src/lib/lessons.ts - Turkish lesson content for PyKid

export interface Exercise {
  id: string;
  title: string;
  description: string;
  starterCode: string;
  solutionCode: string;
  hints: string[];
  validation: {
    expectedOutput?: string[];
    mustContain?: string[];
    mustNotContain?: string[];
    customValidation?: (code: string, output: string) => boolean;
  };
}

export interface LessonStep {
  id: string;
  title: string;
  content: string;
  codeExample?: string;
  exercise?: Exercise;
  videoUrl?: string;
}

export interface Lesson {
  id: string;
  title: string;
  description: string;
  objectives: string[];
  estimatedTime: number; // minutes
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  prerequisites: string[];
  steps: LessonStep[];
  finalProject?: Exercise;
}

export const LESSONS: Lesson[] = [
  {
    id: 'lesson-1',
    title: 'Python Temel Kavramlarƒ±',
    description: 'Python\'a ho≈ü geldin! Bu derste deƒüi≈ükenler, veri t√ºrleri ve temel komutlarƒ± √∂ƒüreneceksin.',
    objectives: [
      'Deƒüi≈üken olu≈üturmayƒ± √∂ƒürenmek',
      'Farklƒ± veri t√ºrlerini anlamak (metin, sayƒ±)',
      'print() komutuyla ekrana yazƒ± yazdƒ±rmak',
      'input() ile kullanƒ±cƒ±dan veri almak',
      'Basit matematik i≈ülemleri yapmak'
    ],
    estimatedTime: 45,
    difficulty: 'beginner',
    prerequisites: [],
    steps: [
      {
        id: 'step-1-1',
        title: 'Python\'a Merhaba De!',
        content: `# üêç Python D√ºnyasƒ±na Ho≈ü Geldin!

Python √∂ƒürenmeye ba≈ülayacaƒüƒ±z! ƒ∞lk √∂nce bilgisayara "Merhaba" diyelim.

**print()** komutu ile ekrana istediƒüimiz yazƒ±larƒ± yazdƒ±rabiliriz:`,
        codeExample: `# ƒ∞lk Python programƒ±n!
print("Merhaba D√ºnya!")
print("Ben Python √∂ƒüreniyorum!")`,
        exercise: {
          id: 'ex-1-1',
          title: 'ƒ∞lk Merhaban',
          description: 'Kendi adƒ±nla birlikte bir merhaba mesajƒ± yazdƒ±r',
          starterCode: `# Buraya kendi adƒ±nla merhaba mesajƒ±nƒ± yaz
`,
          solutionCode: `print("Merhaba, ben Ali!")
print("Python √∂ƒürenmeye ba≈üladƒ±m!")`,
          hints: [
            'print() komutunu kullan',
            'Yazƒ±larƒ± tƒ±rnak i√ßine al',
            'Kendi adƒ±nƒ± kullan'
          ],
          validation: {
            mustContain: ['print(', 'merhaba', 'ben'],
            expectedOutput: ['merhaba']
          }
        }
      },
      {
        id: 'step-1-2', 
        title: 'Deƒüi≈ükenler - Bilgileri Saklayalƒ±m',
        content: `# üì¶ Deƒüi≈ükenler

Deƒüi≈ükenler bilgileri sakladƒ±ƒüƒ±mƒ±z kutular gibidir. ƒ∞√ßine istediƒüimiz veriyi koyabiliriz:

- **Metin** (string): ƒ∞sim, ≈üehir, mesaj
- **Sayƒ±** (integer): Ya≈ü, not, miktar  
- **Ondalƒ±k sayƒ±** (float): Kilo, boy, fiyat`,
        codeExample: `# Deƒüi≈üken √∂rnekleri
isim = "Ahmet"
yas = 12
kilo = 45.5

print("Benim adƒ±m", isim)
print("Ya≈üƒ±m", yas)
print("Kilom", kilo)`,
        exercise: {
          id: 'ex-1-2',
          title: 'Kendini Tanƒ±t',
          description: 'Kendi bilgilerinle deƒüi≈ükenler olu≈ütur ve ekrana yazdƒ±r',
          starterCode: `# Deƒüi≈ükenlerini olu≈ütur
isim = 
yas = 
sehir = 

# Bilgilerini yazdƒ±r
`,
          solutionCode: `isim = "Zeynep"
yas = 11
sehir = "ƒ∞stanbul"

print("Adƒ±m:", isim)
print("Ya≈üƒ±m:", yas)  
print("≈ûehrim:", sehir)`,
          hints: [
            'Metinleri tƒ±rnak i√ßine al',
            'Sayƒ±larƒ± tƒ±rnak olmadan yaz',
            'print() ile deƒüi≈ükenleri yazdƒ±r'
          ],
          validation: {
            mustContain: ['isim =', 'yas =', 'sehir =', 'print('],
            mustNotContain: ['undefined', 'None']
          }
        }
      },
      {
        id: 'step-1-3',
        title: 'Kullanƒ±cƒ±dan Veri Almak',
        content: `# üé§ Kullanƒ±cƒ±yla Konu≈ümak

**input()** komutu ile kullanƒ±cƒ±dan veri alabiliriz. Bu sayede programƒ±mƒ±z interaktif olur!`,
        codeExample: `# Kullanƒ±cƒ± adƒ±nƒ± √∂ƒürenelim
ad = input("Adƒ±n ne? ")
print("Merhaba", ad, "!")

# Ya≈ü bilgisi alalƒ±m
yas = input("Ka√ß ya≈üƒ±ndasƒ±n? ")
print("Vay be,", yas, "ya≈üƒ±ndasƒ±n!")`,
        exercise: {
          id: 'ex-1-3',
          title: 'Sohbet Programƒ±',
          description: 'Kullanƒ±cƒ±yla sohbet eden bir program yaz',
          starterCode: `# Kullanƒ±cƒ±yla sohbet et
`,
          solutionCode: `ad = input("Adƒ±n nedir? ")
favori_renk = input("Favori rengin ne? ")
hobim = input("Hobinin nedir? ")

print("Merhaba", ad, "!")
print("Favori rengin", favori_renk, "√ßok g√ºzelmi≈ü!")
print(hobim, "yapmayƒ± ben de seviyorum!")`,
          hints: [
            'input() ile soru sor',
            'Cevabƒ± bir deƒüi≈ükende sakla',
            'print() ile cevap ver'
          ],
          validation: {
            mustContain: ['input(', 'print('],
            customValidation: (code: string, output: string) => {
              return code.includes('input(') && code.includes('print(') && code.split('input(').length >= 2;
            }
          }
        }
      },
      {
        id: 'step-1-4',
        title: 'Matematik ƒ∞≈ülemleri',
        content: `# üî¢ Python ile Matematik

Python harika bir hesap makinesi! Temel i≈ülemler:

- **Toplama:** +
- **√áƒ±karma:** -
- **√áarpma:** *
- **B√∂lme:** /`,
        codeExample: `# Matematik i≈ülemleri
sayi1 = 15
sayi2 = 7

toplam = sayi1 + sayi2
fark = sayi1 - sayi2
carpim = sayi1 * sayi2
bolum = sayi1 / sayi2

print("Toplam:", toplam)
print("Fark:", fark)
print("√áarpƒ±m:", carpim)
print("B√∂l√ºm:", bolum)`,
        exercise: {
          id: 'ex-1-4',
          title: 'Ya≈ü Hesaplayƒ±cƒ±',
          description: 'Doƒüum yƒ±lƒ±nƒ± alƒ±p ya≈üƒ± hesaplayan program yaz',
          starterCode: `# Ya≈ü hesaplayƒ±cƒ± program
`,
          solutionCode: `dogum_yili = input("Doƒüum yƒ±lƒ±n nedir? ")
dogum_yili = int(dogum_yili)  # Metni sayƒ±ya √ßeviriyoruz

su_anki_yil = 2024
yas = su_anki_yil - dogum_yili

print("Sen", yas, "ya≈üƒ±ndasƒ±n!")`,
          hints: [
            'input() ile doƒüum yƒ±lƒ±nƒ± al',
            'int() ile metni sayƒ±ya √ßevir',
            '2024 - doƒüum_yƒ±lƒ± ile ya≈üƒ± hesapla'
          ],
          validation: {
            mustContain: ['input(', 'int(', '-', 'print('],
            expectedOutput: ['ya≈üƒ±ndasƒ±n', 'ya≈ü']
          }
        }
      }
    ],
    finalProject: {
      id: 'project-1',
      title: 'Ki≈üisel Profil Programƒ±',
      description: 'Kullanƒ±cƒ±nƒ±n bilgilerini alƒ±p g√ºzel bir profil kartƒ± olu≈üturan program',
      starterCode: `# Ki≈üisel Profil Programƒ±
# Kullanƒ±cƒ±dan bilgileri al ve profil kartƒ± olu≈ütur

print("=== Kƒ∞≈ûƒ∞SEL PROFƒ∞L OLU≈ûTURUCU ===")

`,
      solutionCode: `print("=== Kƒ∞≈ûƒ∞SEL PROFƒ∞L OLU≈ûTURUCU ===")

# Bilgileri alalƒ±m
ad = input("Adƒ±n nedir? ")
soyad = input("Soyadƒ±n nedir? ")
yas = input("Ka√ß ya≈üƒ±ndasƒ±n? ")
sehir = input("Hangi ≈üehirde ya≈üƒ±yorsun? ")
hobi = input("Favori hobƒ±n nedir? ")

# Profil kartƒ±nƒ± olu≈üturalƒ±m
print()
print("üåü PROFƒ∞L KARTI üåü")
print("=" * 25)
print("Ad Soyad:", ad, soyad)
print("Ya≈ü:", yas)
print("≈ûehir:", sehir)
print("Hobi:", hobi)
print("=" * 25)
print("Profilin hazƒ±r! üéâ")`,
      hints: [
        'Birden fazla input() kullan',
        'G√ºzel g√∂r√ºn√ºm i√ßin print() ile bo≈ü satƒ±rlar ekle',
        'Profil kartƒ± i√ßin √ßizgiler kullan',
        'Emoji ekleyerek eƒülenceli yap'
      ],
      validation: {
        mustContain: ['input(', 'print(', '==='],
        customValidation: (code: string, output: string) => {
          return code.split('input(').length >= 4 && code.includes('PROFƒ∞L');
        }
      }
    }
  },

  {
    id: 'lesson-2',
    title: 'Karar Verme ve D√∂ng√ºler',
    description: 'Programƒ±n kararlar vermesini ve i≈ülemleri tekrarlamasƒ±nƒ± √∂ƒürenelim!',
    objectives: [
      'if/else ile karar verme yapƒ±larƒ±',
      'Kar≈üƒ±la≈ütƒ±rma operat√∂rlerini kullanma',
      'for d√∂ng√ºs√º ile tekrar etme',
      'while d√∂ng√ºs√º ile ko≈üullu tekrar',
      'range() fonksiyonunu kullanma'
    ],
    estimatedTime: 60,
    difficulty: 'beginner',
    prerequisites: ['lesson-1'],
    steps: [
      {
        id: 'step-2-1',
        title: 'if/else - Kararlar Vermek',
        content: `# ü§î Kararlar Vermek

Programlar da bizim gibi kararlar verebilir! **if/else** ile:

- Eƒüer bir ≈üart saƒülanƒ±yorsa ‚Üí bir ≈üey yap
- Deƒüilse ‚Üí ba≈üka bir ≈üey yap`,
        codeExample: `# Ya≈ü kontrol√º
yas = 16

if yas >= 18:
    print("Sen yeti≈ükinsin!")
else:
    print("Sen hen√ºz √ßocuksun!")
    
# Not deƒüerlendirme
not_puani = 85

if not_puani >= 90:
    print("Harika! AA aldƒ±n!")
elif not_puani >= 80:
    print("√áok iyi! BA aldƒ±n!")
else:
    print("Daha √ßok √ßalƒ±≈ümalƒ±sƒ±n!")`,
        exercise: {
          id: 'ex-2-1',
          title: 'Hava Durumu Danƒ±≈ümanƒ±',
          description: 'Sƒ±caklƒ±ƒüa g√∂re ne giyileceƒüi √∂neren program',
          starterCode: `# Hava durumu danƒ±≈ümanƒ±
sicaklik = input("Bug√ºn hava ka√ß derece? ")
sicaklik = int(sicaklik)

# if/else ile √∂neri ver
`,
          solutionCode: `sicaklik = input("Bug√ºn hava ka√ß derece? ")
sicaklik = int(sicaklik)

if sicaklik >= 25:
    print("Hava sƒ±cak! Ti≈ü√∂rt giy! ‚òÄÔ∏è")
elif sicaklik >= 15:
    print("Hava ƒ±lƒ±k! Sweatshirt giy! üå§Ô∏è")
else:
    print("Hava soƒüuk! Mont giy! üß•")`,
          hints: [
            'int() ile metni sayƒ±ya √ßevir',
            'if/elif/else kullan',
            'Sƒ±caklƒ±k deƒüerlerini kar≈üƒ±la≈ütƒ±r'
          ],
          validation: {
            mustContain: ['if', 'elif', 'else', 'int('],
            expectedOutput: ['sƒ±cak', 'soƒüuk', 'ƒ±lƒ±k']
          }
        }
      },
      {
        id: 'step-2-2',
        title: 'Kar≈üƒ±la≈ütƒ±rma Operat√∂rleri',
        content: `# ‚öñÔ∏è Kar≈üƒ±la≈ütƒ±rmalar

Python'da ≈üartlarƒ± kontrol etmek i√ßin operat√∂rler:

- **==** e≈üit mi?
- **!=** e≈üit deƒüil mi?
- **>** b√ºy√ºk m√º?
- **<** k√º√ß√ºk m√º?
- **>=** b√ºy√ºk e≈üit mi?
- **<=** k√º√ß√ºk e≈üit mi?`,
        codeExample: `# ≈ûifre kontrol√º
sifre = input("≈ûifreyi gir: ")

if sifre == "python123":
    print("Giri≈ü ba≈üarƒ±lƒ±! üéâ")
else:
    print("Yanlƒ±≈ü ≈üifre! ‚ùå")

# Sayƒ± tahmin oyunu
tahmin = int(input("1-10 arasƒ± sayƒ± tahmin et: "))
gizli_sayi = 7

if tahmin == gizli_sayi:
    print("Bravo! Doƒüru tahmin! üéØ")
elif tahmin < gizli_sayi:
    print("Daha b√ºy√ºk bir sayƒ± dene!")
else:
    print("Daha k√º√ß√ºk bir sayƒ± dene!")`,
        exercise: {
          id: 'ex-2-2',
          title: 'Kullanƒ±cƒ± Adƒ± Kontrol√º',
          description: 'G√º√ßl√º kullanƒ±cƒ± adƒ± kontrol√º yapan program',
          starterCode: `# Kullanƒ±cƒ± adƒ± kontrol√º
kullanici_adi = input("Kullanƒ±cƒ± adƒ±n nedir? ")

# Kontrolleri yap
`,
          solutionCode: `kullanici_adi = input("Kullanƒ±cƒ± adƒ±n nedir? ")

if len(kullanici_adi) < 3:
    print("Kullanƒ±cƒ± adƒ± √ßok kƒ±sa! En az 3 harf olmalƒ± ‚ùå")
elif len(kullanici_adi) > 15:
    print("Kullanƒ±cƒ± adƒ± √ßok uzun! En fazla 15 harf olmalƒ± ‚ùå") 
elif kullanici_adi == "admin":
    print("Bu kullanƒ±cƒ± adƒ± yasak! ‚ùå")
else:
    print("Kullanƒ±cƒ± adƒ±n uygun! Ho≈ü geldin", kullanici_adi, "! ‚úÖ")`,
          hints: [
            'len() ile uzunluk kontrol et',
            'Farklƒ± ko≈üullar i√ßin elif kullan',
            'Yasaklƒ± kelime kontrol√º ekle'
          ],
          validation: {
            mustContain: ['len(', 'if', 'elif', '<', '>'],
            expectedOutput: ['kullanƒ±cƒ± adƒ±', 'uygun', 'kƒ±sa', 'uzun']
          }
        }
      },
      {
        id: 'step-2-3',
        title: 'for D√∂ng√ºs√º - Tekrarlama',
        content: `# üîÑ for D√∂ng√ºs√º

Aynƒ± i≈üi defalarca yapmak i√ßin **for d√∂ng√ºs√º** kullanƒ±rƒ±z:

**range()** fonksiyonu ile sayƒ±larƒ± sƒ±rayla alabiliriz:
- range(5) ‚Üí 0, 1, 2, 3, 4
- range(1, 6) ‚Üí 1, 2, 3, 4, 5  
- range(2, 10, 2) ‚Üí 2, 4, 6, 8`,
        codeExample: `# 1'den 5'e kadar sayma
for sayi in range(1, 6):
    print("Sayƒ±:", sayi)

# √áarpƒ±m tablosu
for i in range(1, 11):
    carpim = 7 * i
    print("7 x", i, "=", carpim)

# ƒ∞sim tekrarlama
ad = "Ahmet"
for i in range(3):
    print("Merhaba", ad)`,
        exercise: {
          id: 'ex-2-3',
          title: 'Yƒ±ldƒ±z √áizen Program',
          description: 'Kullanƒ±cƒ±nƒ±n istediƒüi kadar yƒ±ldƒ±z √ßizen program',
          starterCode: `# Yƒ±ldƒ±z √ßizen program
kac_yildiz = input("Ka√ß yƒ±ldƒ±z √ßizmek istiyorsun? ")
kac_yildiz = int(kac_yildiz)

# for d√∂ng√ºs√º ile yƒ±ldƒ±z √ßiz
`,
          solutionCode: `kac_yildiz = input("Ka√ß yƒ±ldƒ±z √ßizmek istiyorsun? ")
kac_yildiz = int(kac_yildiz)

print("ƒ∞≈üte yƒ±ldƒ±zlarƒ±n:")
for i in range(kac_yildiz):
    print("‚≠ê", end="")
print()  # Satƒ±r atlama
print("Toplam", kac_yildiz, "yƒ±ldƒ±z √ßizdim!")`,
          hints: [
            'int() ile metni sayƒ±ya √ßevir',
            'for d√∂ng√ºs√ºnde range() kullan',
            'print() ile yƒ±ldƒ±z karakteri yazdƒ±r'
          ],
          validation: {
            mustContain: ['for', 'range(', 'int('],
            expectedOutput: ['yƒ±ldƒ±z', '‚≠ê']
          }
        }
      },
      {
        id: 'step-2-4',
        title: 'while D√∂ng√ºs√º - Ko≈üullu Tekrar',
        content: `# üîÅ while D√∂ng√ºs√º

**while** d√∂ng√ºs√º bir ≈üart saƒülandƒ±ƒüƒ± s√ºrece √ßalƒ±≈üƒ±r:`,
        codeExample: `# Sayƒ± tahmin oyunu
import random
gizli_sayi = random.randint(1, 10)
tahmin = 0

while tahmin != gizli_sayi:
    tahmin = int(input("1-10 arasƒ± sayƒ± tahmin et: "))
    
    if tahmin < gizli_sayi:
        print("Daha b√ºy√ºk dene!")
    elif tahmin > gizli_sayi:
        print("Daha k√º√ß√ºk dene!")
    else:
        print("Bravo! Doƒüru tahmin! üéâ")`,
        exercise: {
          id: 'ex-2-4',
          title: '≈ûifre Deneme Sistemi',
          description: 'Doƒüru ≈üifre girilene kadar soran program',
          starterCode: `# ≈ûifre sistemi
dogru_sifre = "python2024"

# while ile ≈üifre sor
`,
          solutionCode: `dogru_sifre = "python2024"
girilen_sifre = ""

while girilen_sifre != dogru_sifre:
    girilen_sifre = input("≈ûifreni gir: ")
    
    if girilen_sifre != dogru_sifre:
        print("Yanlƒ±≈ü ≈üifre! Tekrar dene... ‚ùå")
    else:
        print("Giri≈ü ba≈üarƒ±lƒ±! Ho≈ü geldin! ‚úÖ")`,
          hints: [
            'while ko≈üulunu doƒüru kur',
            '≈ûifreyi kontrol et',
            'Yanlƒ±≈üsa tekrar sor'
          ],
          validation: {
            mustContain: ['while', '!=', 'input('],
            expectedOutput: ['≈üifre', 'giri≈ü', 'ba≈üarƒ±lƒ±']
          }
        }
      }
    ],
    finalProject: {
      id: 'project-2',
      title: '√áarpƒ±m Tablosu √ñƒüretmeni',
      description: 'ƒ∞nteraktif √ßarpƒ±m tablosu √∂ƒüreten program',
      starterCode: `# √áarpƒ±m Tablosu √ñƒüretmeni
print("üî¢ √áARPIM TABLOSU √ñƒûRETMENƒ∞ üî¢")
print("=" * 30)

`,
      solutionCode: `print("üî¢ √áARPIM TABLOSU √ñƒûRETMENƒ∞ üî¢")
print("=" * 30)

# Hangi sayƒ±nƒ±n tablosunu √∂ƒürenelim?
sayi = int(input("Hangi sayƒ±nƒ±n √ßarpƒ±m tablosunu √∂ƒürenmek istiyorsun? "))

print(f"\\n{sayi} sayƒ±sƒ±nƒ±n √ßarpƒ±m tablosu:")
print("-" * 20)

# √áarpƒ±m tablosunu g√∂ster
for i in range(1, 11):
    carpim = sayi * i
    print(f"{sayi} x {i:2d} = {carpim:2d}")

print("\\n≈ûimdi seni test edeceƒüim! üéØ")

# Test sorularƒ±
dogru_cevap = 0
toplam_soru = 3

for soru_no in range(1, toplam_soru + 1):
    carpan = random.randint(1, 10)
    dogru_sonuc = sayi * carpan
    
    cevap = int(input(f"\\nSoru {soru_no}: {sayi} x {carpan} = ? "))
    
    if cevap == dogru_sonuc:
        print("‚úÖ Doƒüru! Aferin!")
        dogru_cevap += 1
    else:
        print(f"‚ùå Yanlƒ±≈ü! Doƒüru cevap: {dogru_sonuc}")

print(f"\\nüéâ Test bitti! {dogru_cevap}/{toplam_soru} doƒüru yaptƒ±n!")

if dogru_cevap == toplam_soru:
    print("M√ºkemmel! √áarpƒ±m tablosunu √∂ƒürenmi≈üsin! üåü")
elif dogru_cevap >= toplam_soru // 2:
    print("ƒ∞yi i≈ü √ßƒ±kardƒ±n! Biraz daha pratik yapalƒ±m! üëç")
else:
    print("√áalƒ±≈ümaya devam et, ba≈üarƒ±rsƒ±n! üí™")`,
      hints: [
        'for d√∂ng√ºs√º ile tabloyu yazdƒ±r',
        'random ile test sorularƒ± olu≈ütur',
        'Doƒüru cevap sayƒ±sƒ±nƒ± takip et',
        'Son deƒüerlendirme yap'
      ],
      validation: {
        mustContain: ['for', 'range(', 'int(', 'if', 'print('],
        customValidation: (code: string, output: string) => {
          return code.includes('for') && code.includes('range(') && code.includes('√ßarpƒ±m');
        }
      }
    }
  },

  {
    id: 'lesson-3',
    title: 'Fonksiyonlar ve Listeler',
    description: 'Kodlarƒ± organize etmeyi ve veri koleksiyonlarƒ±nƒ± y√∂netmeyi √∂ƒürenelim!',
    objectives: [
      'Fonksiyon olu≈üturma ve √ßaƒüƒ±rma',
      'Parametreli fonksiyonlar',
      'Return ile deƒüer d√∂nd√ºrme',
      'Liste olu≈üturma ve kullanma',
      'Liste metodlarƒ± (append, remove, len)',
      'Listeler √ºzerinde d√∂ng√º kurma'
    ],
    estimatedTime: 75,
    difficulty: 'intermediate', 
    prerequisites: ['lesson-1', 'lesson-2'],
    steps: [
      {
        id: 'step-3-1',
        title: 'Fonksiyonlar - Kod Organizasyonu',
        content: `# üõ†Ô∏è Fonksiyonlar

Fonksiyonlar kod par√ßacƒ±klarƒ±nƒ± tekrar kullanmamƒ±zƒ± saƒülar. **def** ile tanƒ±mlanƒ±r:

Faydalarƒ±:
- Aynƒ± kodu tekrar yazmayƒ±z
- Kodumuz daha d√ºzenli olur
- Hatalarƒ± bulmak kola≈üƒ±r`,
        codeExample: `# Basit fonksiyon
def selamla():
    print("Merhaba!")
    print("Python √∂ƒüreniyoruz!")

# Fonksiyonu √ßaƒüƒ±rma
selamla()
selamla()  # ƒ∞stediƒüimiz kadar √ßaƒüƒ±rabiliriz

# Parametreli fonksiyon
def kisisel_selam(isim):
    print("Merhaba", isim, "!")
    print("Bug√ºn nasƒ±lsƒ±n?")

kisisel_selam("Ahmet")
kisisel_selam("Ay≈üe")`,
        exercise: {
          id: 'ex-3-1',
          title: 'Doƒüum G√ºn√º ≈ûarkƒ±sƒ±',
          description: 'ƒ∞sim alƒ±p doƒüum g√ºn√º ≈üarkƒ±sƒ± s√∂yleyen fonksiyon',
          starterCode: `# Doƒüum g√ºn√º ≈üarkƒ±sƒ± fonksiyonu
def dogum_gunu_sarkisi():
    # Fonksiyonu buraya yaz
    pass

# Fonksiyonu test et
`,
          solutionCode: `def dogum_gunu_sarkisi(isim):
    print("üéµ Doƒüum g√ºn√ºn kutlu olsun! üéµ")
    print(f"üéµ Doƒüum g√ºn√ºn kutlu olsun {isim}! üéµ")
    print("üéµ Doƒüum g√ºn√ºn kutlu olsun! üéµ")
    print("üé∂ Nice mutlu yƒ±llara! üé∂")
    print("üéÇüéàüéÅ")

# Test edelim
dogum_gunu_sarkisi("Zeynep")
print()
dogum_gunu_sarkisi("Mehmet")`,
          hints: [
            'def ile fonksiyon tanƒ±mla',
            'Parametre olarak isim al',
            '≈ûarkƒ± s√∂zlerini yazdƒ±r',
            'Emoji kullan'
          ],
          validation: {
            mustContain: ['def', 'doƒüum', 'kutlu', 'print('],
            expectedOutput: ['doƒüum g√ºn√ºn kutlu', 'üéµ']
          }
        }
      },
      {
        id: 'step-3-2',
        title: 'Return - Deƒüer D√∂nd√ºrme',
        content: `# ‚Ü©Ô∏è Return ile Deƒüer D√∂nd√ºrme

Fonksiyonlar hesap yapƒ±p sonucu **return** ile geri verebilir:`,
        codeExample: `# Toplama fonksiyonu
def topla(sayi1, sayi2):
    sonuc = sayi1 + sayi2
    return sonuc

# Fonksiyonu kullanma
toplam = topla(15, 25)
print("Toplam:", toplam)

# Alan hesaplama fonksiyonu
def dikdortgen_alani(uzunluk, genislik):
    alan = uzunluk * genislik
    return alan

def cember_alani(yaricap):
    pi = 3.14159
    alan = pi * yaricap * yaricap
    return alan

# Test edelim
print("Dikd√∂rtgen alanƒ±:", dikdortgen_alani(10, 5))
print("√áember alanƒ±:", cember_alani(7))`,
        exercise: {
          id: 'ex-3-2',
          title: 'Hesap Makinesi Fonksiyonlarƒ±',
          description: '4 i≈ülem yapan fonksiyonlar olu≈ütur',
          starterCode: `# Hesap makinesi fonksiyonlarƒ±
def topla(a, b):
    # Toplama fonksiyonu
    pass

def cikar(a, b):
    # √áƒ±karma fonksiyonu  
    pass

# Diƒüer fonksiyonlarƒ± da yaz
`,
          solutionCode: `def topla(a, b):
    return a + b

def cikar(a, b):
    return a - b

def carp(a, b):
    return a * b

def bol(a, b):
    if b != 0:
        return a / b
    else:
        return "Sƒ±fƒ±ra b√∂lme hatasƒ±!"

# Test edelim
print("15 + 7 =", topla(15, 7))
print("15 - 7 =", cikar(15, 7))  
print("15 √ó 7 =", carp(15, 7))
print("15 √∑ 7 =", bol(15, 7))
print("15 √∑ 0 =", bol(15, 0))`,
          hints: [
            'Her fonksiyon i√ßin return kullan',
            'B√∂lmede sƒ±fƒ±r kontrol√º yap',
            'Fonksiyonlarƒ± test et'
          ],
          validation: {
            mustContain: ['def', 'return', '+', '-', '*', '/'],
            expectedOutput: ['15', '7', '=']
          }
        }
      },
      {
        id: 'step-3-3',
        title: 'Listeler - Veri Koleksiyonlarƒ±',
        content: `# üìã Listeler

Listeler birden fazla veriyi saklamak i√ßin kullanƒ±lƒ±r:

**Liste i≈ülemleri:**
- **append()** - eleman ekler
- **remove()** - eleman √ßƒ±karƒ±r  
- **len()** - uzunluƒüu verir
- **[0]** - ilk eleman
- **[-1]** - son eleman`,
        codeExample: `# Liste olu≈üturma
meyveler = ["elma", "armut", "√ßilek", "muz"]
sayilar = [10, 25, 3, 88, 45]

print("Meyveler:", meyveler)
print("ƒ∞lk meyve:", meyveler[0])
print("Son meyve:", meyveler[-1])

# Liste i≈ülemleri
meyveler.append("portakal")  # Eleman ekleme
print("Portakal eklendi:", meyveler)

meyveler.remove("armut")  # Eleman √ßƒ±karma
print("Armut √ßƒ±karƒ±ldƒ±:", meyveler)

print("Meyve sayƒ±sƒ±:", len(meyveler))

# Liste √ºzerinde d√∂ng√º
for meyve in meyveler:
    print("Meyve:", meyve)`,
        exercise: {
          id: 'ex-3-3',
          title: 'Alƒ±≈üveri≈ü Listesi Uygulamasƒ±',
          description: 'Alƒ±≈üveri≈ü listesi y√∂netim sistemi',
          starterCode: `# Alƒ±≈üveri≈ü listesi uygulamasƒ±
alisveris_listesi = []

# Fonksiyonlarƒ± yaz ve men√º olu≈ütur
`,
          solutionCode: `alisveris_listesi = []

def urun_ekle(urun):
    alisveris_listesi.append(urun)
    print(f"‚úÖ '{urun}' listeye eklendi!")

def urun_cikar(urun):
    if urun in alisveris_listesi:
        alisveris_listesi.remove(urun)
        print(f"‚ùå '{urun}' listeden √ßƒ±karƒ±ldƒ±!")
    else:
        print(f"'{urun}' listede bulunamadƒ±!")

def listeyi_goster():
    print("\\nüõí ALI≈ûVERI≈û Lƒ∞STESƒ∞:")
    if len(alisveris_listesi) == 0:
        print("Liste bo≈ü!")
    else:
        for i, urun in enumerate(alisveris_listesi, 1):
            print(f"{i}. {urun}")

# Test edelim
urun_ekle("s√ºt")
urun_ekle("ekmek") 
urun_ekle("yumurta")
listeyi_goster()

urun_cikar("ekmek")
listeyi_goster()`,
          hints: [
            'Bo≈ü liste ile ba≈üla',
            'append() ile eleman ekle',
            'remove() ile eleman √ßƒ±kar',
            'for d√∂ng√ºs√º ile listele'
          ],
          validation: {
            mustContain: ['def', 'append(', 'remove(', 'for', 'in'],
            expectedOutput: ['liste', 'eklendi', '√ßƒ±karƒ±ldƒ±']
          }
        }
      },
      {
        id: 'step-3-4',
        title: 'Liste ve Fonksiyon Birlikte',
        content: `# üéØ Listeler ve Fonksiyonlar

Fonksiyonlar listelerle √ßalƒ±≈üabilir:`,
        codeExample: `# Liste ile √ßalƒ±≈üan fonksiyonlar
def liste_ozeti(sayilar):
    print("Liste:", sayilar)
    print("Eleman sayƒ±sƒ±:", len(sayilar))
    print("En b√ºy√ºk:", max(sayilar))
    print("En k√º√ß√ºk:", min(sayilar))
    print("Toplam:", sum(sayilar))
    print("Ortalama:", sum(sayilar) / len(sayilar))

def cift_sayilari_bul(sayilar):
    cift_sayilar = []
    for sayi in sayilar:
        if sayi % 2 == 0:
            cift_sayilar.append(sayi)
    return cift_sayilar

# Test edelim
notlar = [85, 90, 78, 92, 88, 76, 95]
liste_ozeti(notlar)

print("\\n√áift sayƒ±lar:", cift_sayilari_bul(notlar))`,
        exercise: {
          id: 'ex-3-4',
          title: '√ñƒürenci Not Sistemi',
          description: '√ñƒürenci notlarƒ±nƒ± y√∂neten kapsamlƒ± sistem',
          starterCode: `# √ñƒürenci not sistemi
ogrenci_notlari = []

# Fonksiyonlarƒ± buraya yaz
`,
          solutionCode: `ogrenci_notlari = []

def not_ekle(not_puani):
    if 0 <= not_puani <= 100:
        ogrenci_notlari.append(not_puani)
        print(f"‚úÖ {not_puani} notu eklendi!")
    else:
        print("‚ùå Not 0-100 arasƒ±nda olmalƒ±!")

def not_ortalamasi():
    if len(ogrenci_notlari) == 0:
        return "Hen√ºz not girilmedi!"
    return sum(ogrenci_notlari) / len(ogrenci_notlari)

def harf_notu_hesapla(ortalama):
    if ortalama >= 90:
        return "AA"
    elif ortalama >= 80:
        return "BA"  
    elif ortalama >= 70:
        return "BB"
    elif ortalama >= 60:
        return "CB"
    elif ortalama >= 50:
        return "CC"
    else:
        return "FF"

def rapor_olustur():
    print("\\nüìä √ñƒûRENCI NOT RAPORU")
    print("=" * 25)
    print("Notlar:", ogrenci_notlari)
    print("Not sayƒ±sƒ±:", len(ogrenci_notlari))
    
    if len(ogrenci_notlari) > 0:
        ortalama = not_ortalamasi()
        print(f"Ortalama: {ortalama:.1f}")
        print("Harf notu:", harf_notu_hesapla(ortalama))
        print("En y√ºksek not:", max(ogrenci_notlari))
        print("En d√º≈ü√ºk not:", min(ogrenci_notlari))

# Test edelim
not_ekle(85)
not_ekle(92)
not_ekle(78)
not_ekle(88)
rapor_olustur()`,
          hints: [
            'Not giri≈üinde 0-100 aralƒ±ƒüƒ± kontrol et',
            'Ortalama i√ßin sum() ve len() kullan',
            'Harf notunu if/elif ile belirle',
            'max() ve min() fonksiyonlarƒ± kullan'
          ],
          validation: {
            mustContain: ['def', 'sum(', 'len(', 'max(', 'min(', 'if'],
            customValidation: (code: string, output: string) => {
              return code.includes('ortalama') && code.includes('append(') && code.split('def').length >= 3;
            }
          }
        }
      }
    ],
    finalProject: {
      id: 'project-3',
      title: 'Ki≈üisel Finans Takip Sistemi',
      description: 'Gelir/gider takibi yapan kapsamlƒ± program',
      starterCode: `# Ki≈üisel Finans Takip Sistemi
print("üí∞ Kƒ∞≈ûƒ∞SEL Fƒ∞NANS TAKƒ∞P Sƒ∞STEMƒ∞ üí∞")
print("=" * 35)

gelirler = []
giderler = []

# Fonksiyonlarƒ± buraya yaz
`,
      solutionCode: `print("üí∞ Kƒ∞≈ûƒ∞SEL Fƒ∞NANS TAKƒ∞P Sƒ∞STEMƒ∞ üí∞")
print("=" * 35)

gelirler = []
giderler = []

def gelir_ekle(miktar, aciklama=""):
    gelirler.append({"miktar": miktar, "aciklama": aciklama})
    print(f"‚úÖ {miktar} TL gelir eklendi! ({aciklama})")

def gider_ekle(miktar, aciklama=""):
    giderler.append({"miktar": miktar, "aciklama": aciklama})
    print(f"‚ùå {miktar} TL gider eklendi! ({aciklama})")

def toplam_gelir():
    return sum(item["miktar"] for item in gelirler)

def toplam_gider():
    return sum(item["miktar"] for item in giderler)

def net_durum():
    return toplam_gelir() - toplam_gider()

def finansal_rapor():
    print("\\nüìä Fƒ∞NANSAL RAPOR")
    print("=" * 20)
    
    print("\\nüíö GELƒ∞RLER:")
    if len(gelirler) == 0:
        print("Hen√ºz gelir kaydƒ± yok")
    else:
        for i, gelir in enumerate(gelirler, 1):
            print(f"{i}. {gelir['miktar']} TL - {gelir['aciklama']}")
    
    print("\\n‚ù§Ô∏è Gƒ∞DERLER:")  
    if len(giderler) == 0:
        print("Hen√ºz gider kaydƒ± yok")
    else:
        for i, gider in enumerate(giderler, 1):
            print(f"{i}. {gider['miktar']} TL - {gider['aciklama']}")
    
    print("\\nüí∞ √ñZET:")
    print(f"Toplam Gelir: {toplam_gelir()} TL")
    print(f"Toplam Gider: {toplam_gider()} TL")
    net = net_durum()
    print(f"Net Durum: {net} TL", end="")
    
    if net > 0:
        print(" üéâ (Artƒ±)")
    elif net < 0:
        print(" üò∞ (Eksi)")
    else:
        print(" üòê (Sƒ±fƒ±r)")

def butce_onerileri():
    net = net_durum()
    toplam_gdr = toplam_gider()
    
    print("\\nüí° B√úT√áE √ñNERƒ∞LERƒ∞:")
    
    if net < 0:
        print("‚ö†Ô∏è Giderleriniz gelirlerinizden fazla!")
        print("üî∏ Gereksiz harcamalarƒ± azaltƒ±n")
        print("üî∏ Ek gelir kaynaklarƒ± arayƒ±n")
    elif net > toplam_gdr * 0.2:
        print("üéâ Harika! G√ºzel tasarruf yapƒ±yorsunuz!")
        print("üî∏ Tasarruflarƒ±nƒ±zƒ± deƒüerlendirin")
    else:
        print("üëç Dengeli bir b√ºt√ße y√∂netiyorsunuz")
        print("üî∏ Tasarruf miktarƒ±nƒ± artƒ±rmaya √ßalƒ±≈üƒ±n")

# Test verisi
gelir_ekle(3000, "Maa≈ü")
gelir_ekle(500, "Freelance i≈ü")
gider_ekle(1200, "Kira")
gider_ekle(800, "Market")
gider_ekle(300, "Ula≈üƒ±m")
gider_ekle(200, "Eƒülence")

finansal_rapor()
butce_onerileri()`,
      hints: [
        'Dictionary yapƒ±sƒ± kullan ({"miktar": ..., "aciklama": ...})',
        'sum() ile liste toplamlarƒ± al',
        'enumerate() ile numaralƒ± listeleme',
        'Net durum = gelir - gider',
        'Ko≈üullara g√∂re √∂neriler ver'
      ],
      validation: {
        mustContain: ['def', 'sum(', 'for', 'in', 'if', 'elif', 'print('],
        customValidation: (code: string, output: string) => {
          return code.includes('gelir') && code.includes('gider') && 
                 code.includes('toplam') && code.split('def').length >= 5;
        }
      }
    }
  }
];

// Lesson progress tracking helpers
export function getLessonById(id: string): Lesson | undefined {
  return LESSONS.find(lesson => lesson.id === id);
}

export function getStepById(lessonId: string, stepId: string): LessonStep | undefined {
  const lesson = getLessonById(lessonId);
  return lesson?.steps.find(step => step.id === stepId);
}

export function getExerciseById(lessonId: string, stepId: string, exerciseId: string): Exercise | undefined {
  const step = getStepById(lessonId, stepId);
  return step?.exercise?.id === exerciseId ? step.exercise : undefined;
}

export function getNextStep(lessonId: string, currentStepId: string): LessonStep | null {
  const lesson = getLessonById(lessonId);
  if (!lesson) return null;
  
  const currentIndex = lesson.steps.findIndex(step => step.id === currentStepId);
  if (currentIndex === -1 || currentIndex >= lesson.steps.length - 1) return null;
  
  return lesson.steps[currentIndex + 1];
}

export function getNextLesson(currentLessonId: string): Lesson | null {
  const currentIndex = LESSONS.findIndex(lesson => lesson.id === currentLessonId);
  if (currentIndex === -1 || currentIndex >= LESSONS.length - 1) return null;
  
  return LESSONS[currentIndex + 1];
}

export function isLessonCompleted(lessonId: string): boolean {
  const completedLessons = JSON.parse(localStorage.getItem('pykid:completedLessons') || '[]');
  return completedLessons.includes(lessonId);
}

export function markLessonCompleted(lessonId: string): void {
  const completedLessons = JSON.parse(localStorage.getItem('pykid:completedLessons') || '[]');
  if (!completedLessons.includes(lessonId)) {
    completedLessons.push(lessonId);
    localStorage.setItem('pykid:completedLessons', JSON.stringify(completedLessons));
  }
}

export function isStepCompleted(lessonId: string, stepId: string): boolean {
  const completedSteps = JSON.parse(localStorage.getItem('pykid:completedSteps') || '[]');
  return completedSteps.includes(`${lessonId}:${stepId}`);
}

export function markStepCompleted(lessonId: string, stepId: string): void {
  const completedSteps = JSON.parse(localStorage.getItem('pykid:completedSteps') || '[]');
  const stepKey = `${lessonId}:${stepId}`;
  if (!completedSteps.includes(stepKey)) {
    completedSteps.push(stepKey);
    localStorage.setItem('pykid:completedSteps', JSON.stringify(completedSteps));
  }
}